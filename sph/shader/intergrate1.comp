#version 460

#define WORK_GROUP_SIZE 128


layout (local_size_x = WORK_GROUP_SIZE) in;


// constants
#define NUM_PARTICLES 27000
#define PARTICLE_STIFFNESS 3
#define RESTITUTION 0.5f
#define TIME_STEP 0.0001f
#define WALL_DAMPING 0.3f

layout(std430, binding = 0) buffer position_block
{
    vec3 position[];
};

layout(std430, binding = 1) buffer velocity_block
{
    vec3 velocity[];
};

layout(std430, binding = 2) buffer force_block
{
    vec3 force[];
};

layout(std430, binding = 3) buffer density_block
{
    float density[];
};

layout(std430, binding = 4) buffer pressure_block
{
    float pressure[];
};

void main()
{
    uint i = gl_GlobalInvocationID.x;


    // integrate
    vec3 acceleration = force[i] / density[i];
    vec3 new_velocity = velocity[i] + TIME_STEP * acceleration;
    vec3 new_position = (position[i] + TIME_STEP * new_velocity);

	/*
	vec3 contactPoint = vec3(0,0,0);
	vec3 unitSurfaceNormal = vec3(0,0,0);
	if (abs(new_position.x) <= WALL_DAMPING / 2 && abs(new_position.y) <= WALL_DAMPING / 2 && abs(new_position.z) <= WALL_DAMPING / 2){}

	else{
	uint maxComponent = 1;
	float maxValue = abs(new_position.x);
	if(maxValue < abs(new_position.y))
	{
		maxComponent = 2;
		maxValue = abs(new_position.y);
	}
	if (maxValue < abs(new_position.z)) {
		maxComponent = 3;
		maxValue = abs(new_position.z);
	}
	
	switch (maxComponent) {
	case 1:
		if (new_position.x < -WALL_DAMPING / 2) {
			contactPoint = new_position;            
			contactPoint.x = -WALL_DAMPING / 2;
			if (new_position.y < -WALL_DAMPING / 2)     
				contactPoint.y = -WALL_DAMPING / 2;
			else if (new_position.y > WALL_DAMPING / 2) contactPoint.y = WALL_DAMPING / 2;
			if (new_position.z < -WALL_DAMPING / 2)     contactPoint.z = -WALL_DAMPING / 2;
			else if (new_position.z > WALL_DAMPING / 2) contactPoint.z = WALL_DAMPING / 2;
			unitSurfaceNormal = vec3(1.0f, 0.0f, 0.0f);
		}
		else if (new_position.x > WALL_DAMPING / 2) {
			contactPoint = new_position;            contactPoint.x = WALL_DAMPING / 2;
			if (new_position.y < -WALL_DAMPING / 2)     contactPoint.y = -WALL_DAMPING / 2;
			else if (new_position.y > WALL_DAMPING / 2) contactPoint.y = WALL_DAMPING / 2;
			if (new_position.z < -WALL_DAMPING / 2)     contactPoint.z = -WALL_DAMPING / 2;
			else if (new_position.z > WALL_DAMPING / 2) contactPoint.z = WALL_DAMPING / 2;
			unitSurfaceNormal = vec3(-1.0f, 0.0f, 0.0f);
		}
		vec3 fuck = vec3(0,0,0);
		fuck = new_position - contactPoint;
		new_velocity = new_velocity - unitSurfaceNormal * (1 + RESTITUTION *length(fuck) / (TIME_STEP * length(new_velocity))) *1;
		new_position = contactPoint;
		break;

	case 2:
		if (new_position.y < -WALL_DAMPING / 2) {
			contactPoint = new_position;            
			contactPoint.y = -WALL_DAMPING / 2;
			if (new_position.x < -WALL_DAMPING / 2)     contactPoint.x = -WALL_DAMPING / 2;
			else if (new_position.x > WALL_DAMPING / 2) contactPoint.x = WALL_DAMPING / 2;
			if (new_position.z < -WALL_DAMPING / 2)     contactPoint.z = -WALL_DAMPING / 2;
			else if (new_position.z > WALL_DAMPING / 2) contactPoint.z = WALL_DAMPING / 2;
			unitSurfaceNormal = vec3(0.0f, 1.0f, 0.0f);
		}
		else if (new_position.y > WALL_DAMPING / 2) {
			contactPoint = new_position;            contactPoint.y = WALL_DAMPING / 2;
			if (new_position.x < -WALL_DAMPING / 2)     contactPoint.x = -WALL_DAMPING / 2;
			else if (new_position.x > WALL_DAMPING / 2) contactPoint.x = WALL_DAMPING / 2;
			if (new_position.z < -WALL_DAMPING / 2)     contactPoint.z = -WALL_DAMPING / 2;
			else if (new_position.z > WALL_DAMPING / 2) contactPoint.z = WALL_DAMPING / 2;
			unitSurfaceNormal = vec3(0.0f, -1.0f, 0.0f);
		}
		fuck = vec3(0,0,0);
		fuck = new_position - contactPoint;
		new_velocity = new_velocity - unitSurfaceNormal * (1 + RESTITUTION *length(fuck) / (TIME_STEP * length(new_velocity))) *100;
		new_position = contactPoint;
		break;

	case 3:
		if (new_position.z < -WALL_DAMPING / 2) {
			contactPoint = new_position;            contactPoint.z = -WALL_DAMPING / 2;
			if (new_position.x < -WALL_DAMPING / 2)     contactPoint.x = -WALL_DAMPING / 2;
			else if (new_position.x > WALL_DAMPING / 2) contactPoint.x = WALL_DAMPING / 2;
			if (new_position.y < -WALL_DAMPING / 2)     contactPoint.y = -WALL_DAMPING / 2;
			else if (new_position.y > WALL_DAMPING / 2) contactPoint.y = WALL_DAMPING / 2;
			unitSurfaceNormal = vec3(0.0f, 0.0f, 1.0f);
		}
		else if (new_position.z > WALL_DAMPING / 2) {
			contactPoint = new_position;            contactPoint.z = WALL_DAMPING / 2;
			if (new_position.x < -WALL_DAMPING / 2)     contactPoint.x = -WALL_DAMPING / 2;
			else if (new_position.x > WALL_DAMPING / 2) contactPoint.x = WALL_DAMPING / 2;
			if (new_position.y < -WALL_DAMPING / 2)     contactPoint.y = -WALL_DAMPING / 2;
			else if (new_position.y > WALL_DAMPING / 2) contactPoint.y = WALL_DAMPING / 2;
			unitSurfaceNormal = vec3(0.0f, 0.0f, -1.0f);
		}
		fuck = vec3(0,0,0);
		fuck = new_position - contactPoint;
		new_velocity = new_velocity - unitSurfaceNormal * (1 + RESTITUTION *length(fuck) / (TIME_STEP * length(new_velocity))) *1;
		new_position = contactPoint;
		break;
	}
	}*/
    // boundary conditions
	
  if (new_position.x < -1)
    {
        new_position.x = -1;
        new_velocity.x *= -1 * WALL_DAMPING;
    }
    else if (new_position.x > 1)
    {
        new_position.x = 1;
        new_velocity.x *= -1 * WALL_DAMPING;
    }
    else if (new_position.y < -1)
    {
        new_position.y = -1;
        new_velocity.y *= -1 * WALL_DAMPING;
    }
    else if (new_position.y > 1)
    {
        new_position.y = 1;
        new_velocity.y *= -1 * WALL_DAMPING;
    }
	else if (new_position.z < -1)
	{
		new_position.z = -1;
        new_velocity.z *= -1 * WALL_DAMPING;
	}
	else if(new_position.z > 1)
	{
		new_position.z = 1;
        new_velocity.z *= -1 * WALL_DAMPING;
	}

    velocity[i] = new_velocity;
    position[i] = new_position;
}
