#version 460

#define WORK_GROUP_SIZE 128


layout (local_size_x = WORK_GROUP_SIZE) in;


// constants
#define NUM_PARTICLES 27000
#define PARTICLE_STIFFNESS 3
#define PI_FLOAT 3.1415927410125732421875f
#define PARTICLE_RADIUS (pow(1000 * PARTICLE_MASS / PARTICLE_RESTING_DENSITY, 1.0f/3.0f)/10)/2
#define PARTICLE_RESTING_DENSITY 998.29
// Mass = Density * Volume
#define PARTICLE_MASS 0.02
#define SMOOTHING_LENGTH 0.0457f
#define PARTICLE_VISCOSITY 3000.f

layout(std430, binding = 0) buffer position_block
{
    vec3 position[];
};

layout(std430, binding = 1) buffer velocity_block
{
    vec3 velocity[];
};

layout(std430, binding = 2) buffer force_block
{
    vec3 force[];
};

layout(std430, binding = 3) buffer density_block
{
    float density[];
};

layout(std430, binding = 4) buffer pressure_block
{
    float pressure[];
};

void main()
{
    uint i = gl_GlobalInvocationID.x;
    
    // compute density
    float density_sum = 0.f;
    for (int j = 0; j < NUM_PARTICLES; j++)
    {
        vec3 delta = position[i] - position[j];
        float r = length(delta);
        if (r < SMOOTHING_LENGTH)
        {
            density_sum += PARTICLE_MASS * /* poly6 kernel */ 315.f * pow(SMOOTHING_LENGTH * SMOOTHING_LENGTH - r * r, 3) / (64.f * PI_FLOAT * pow(SMOOTHING_LENGTH, 9));
        }
    }
    density[i] = density_sum;
    // compute pressure
    pressure[i] = PARTICLE_STIFFNESS * (density_sum - PARTICLE_RESTING_DENSITY);
}